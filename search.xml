<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis的五大数据类型及操作命令</title>
      <link href="/buffifly/2021/07/07/Redis%E7%9A%84%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/buffifly/2021/07/07/Redis%E7%9A%84%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\buffifly\css\APlayer.min.css"><script src="\buffifly\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\buffifly\js\Meting.min.js"></script><h2 id="Redis的五大数据类型及常用命令"><a href="#Redis的五大数据类型及常用命令" class="headerlink" title="Redis的五大数据类型及常用命令"></a>Redis的五大数据类型及常用命令</h2><h3 id=""><a href="#" class="headerlink" title=""></a><p class='p small'>Redis 键(key) 的常用命令</p></h3><p class='p small'>该命令用在key存在时删除key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Del key</span><br></pre></td></tr></table></figure><p class='p small'>序列化给定key，并返回被序列化的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUMP key</span><br></pre></td></tr></table></figure><p class='p small'>检查给定的key是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure><p class='p small'>为给定key设置过期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE key seconds</span><br></pre></td></tr></table></figure><p class='p small'>EXPIREAT的作用和EXPIRE类似，都用于为key设置过期时间，不同在于EXPIREAT命令接受的时间参数是时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIREAT key timestamp</span><br></pre></td></tr></table></figure><p class='p small'>设置key的过期时间以毫秒计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PEXPIRE key milliseconds</span><br></pre></td></tr></table></figure><p class='p small'>查找所以符合给定模式的key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure><p class='p small'>将当前数据库的key移动到给定的数据库db当中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOVE key db</span><br></pre></td></tr></table></figure><p class='p small'>移除key的过期时间，key将持久保持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PERSIST key</span><br></pre></td></tr></table></figure><p class='p small'>以毫秒为单位返回key的剩余过期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTTL key</span><br></pre></td></tr></table></figure><p class='p small'>以秒为单位返回key的剩余过期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL key</span><br></pre></td></tr></table></figure><p class='p small'>从当前库中随机返回一个key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RANDOMKEY</span><br></pre></td></tr></table></figure><p class='p small'>修改key的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME key newkey</span><br></pre></td></tr></table></figure><p class='p small'>返回key所储存值的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE key</span><br></pre></td></tr></table></figure><br/><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><p class='p small'>String（字符串）</p></h3><p class='p small'>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value，String类型是二进制安全的，意思是Redis的String可以包含任何数据，比如jpg图片或者序列化的对象</p><p><strong><p class='p small'>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p></strong></p><h4 id="Redis中String的常用命令"><a href="#Redis中String的常用命令" class="headerlink" title="Redis中String的常用命令"></a>Redis中String的常用命令</h4><p class='p small'>设置指定key的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value</span><br></pre></td></tr></table></figure><p class='p small'>获取指定key的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET key</span><br></pre></td></tr></table></figure><p class='p small'>获返回key中字符串值的子字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETRANGE key start end</span><br></pre></td></tr></table></figure><p class='p small'>将给定的key的值设为value，并返回key的旧值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETSET key value</span><br></pre></td></tr></table></figure><p class='p small'>对key所存储的字符串值，获取指定偏移量上的位（bit）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT key offset</span><br></pre></td></tr></table></figure><p class='p small'>获取一个或多个给定key的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MGET key1 key2 key3......</span><br></pre></td></tr></table></figure><p class='p small'>对key所存储的字符串值，设置或清除指定偏移量上的位（bit）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value</span><br></pre></td></tr></table></figure><p class='p small'>只有在key不存在时设置key的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX key value</span><br></pre></td></tr></table></figure><p class='p small'>将值value关联到key，并设置key的过期时间（秒）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETEX key seconds value</span><br></pre></td></tr></table></figure><p class='p small'>返回key所存储的字符串值的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STRLEN key</span><br></pre></td></tr></table></figure><p class='p small'>同时设置多个key value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSET k1 v1 k2 v2</span><br></pre></td></tr></table></figure><p class='p small'>同时设置一个或者多个键值对，仅当前所有key都不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSETNX k1 v1 k2 v2</span><br></pre></td></tr></table></figure><p class='p small'>以毫秒为单位设置key的生存时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSETEX key milliseconds value</span><br></pre></td></tr></table></figure><p class='p small'>将key中存储的数字值增1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCR key</span><br></pre></td></tr></table></figure><p class='p small'>将key所存储的值加上给定的增量值（inceement）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCRBY key inceement</span><br></pre></td></tr></table></figure><p class='p small'>将key所存储的值加上给定的浮点增量值（inceement）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCRBYFLOAT key increment</span><br></pre></td></tr></table></figure><p class='p small'>将key中存储的数字减一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECR key</span><br></pre></td></tr></table></figure><p class='p small'>将key所存储的值减去给定的减量值（decrement）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECRBY key decrement</span><br></pre></td></tr></table></figure><p class='p small'>如果key存在并且是一个字符串，将值追加到key的末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPEND key value</span><br></pre></td></tr></table></figure><br/><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><p class='p small'>Hash（哈希，类似java里的Map）</p></h3><p class='p small'>Redis hash 是一个键值对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p class='p small'>类似Java里面的Map<String</p><p class='p small'>删除一个或多个哈西表字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HDEL key fieId2 field2.....</span><br></pre></td></tr></table></figure><p class='p small'>查看哈西表key中，指定的字段是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEXISTS key field</span><br></pre></td></tr></table></figure><p class='p small'>获取存储在哈希表中指定字段的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGET key field</span><br></pre></td></tr></table></figure><p class='p small'>获取在哈希表中指定key的所有字段的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGETALL key</span><br></pre></td></tr></table></figure><p class='p small'>为哈希表key中的指定字段的整数值加上增量increment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HINCRBY key field increment</span><br></pre></td></tr></table></figure><p class='p small'>为哈希表key中的指定字段的浮点数值加上增量increment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HINCRBYELOAT key field increment</span><br></pre></td></tr></table></figure><p class='p small'>获取所有哈希表中的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEYS key</span><br></pre></td></tr></table></figure><p class='p small'>获取哈希表中字段的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HLEN key</span><br></pre></td></tr></table></figure><p class='p small'>获取所有给定字段的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMGET key field1 field2</span><br></pre></td></tr></table></figure><p class='p small'>同时将多个field-value对设置到哈希表key中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMSET key firld1 value1 firld2 value2</span><br></pre></td></tr></table></figure><p class='p small'>将哈希表key中的字段firld的值设value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSET key firld value</span><br></pre></td></tr></table></figure><p class='p small'>只有在字段field不存在时，设置哈希表字段的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSETNX key firld value</span><br></pre></td></tr></table></figure><p class='p small'>获取哈希表中所有值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HVALS key</span><br></pre></td></tr></table></figure><p class='p small'>迭代哈希表中的键值对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><br/><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><p class='p small'>List（列表）</p></h3><p class='p small'>Redis 列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素导列表的头部（左边）或者尾部（右边）它的底层实际是个链表</p><p class='p small'>通过索引获取列表中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LINDEX key index</span><br></pre></td></tr></table></figure><p class='p small'>在列表的元素前或后插入元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LINSERT key BEFOREIAFTER pivot value</span><br></pre></td></tr></table></figure><p class='p small'>获取列表长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LLEN key</span><br></pre></td></tr></table></figure><p class='p small'>移出并获取列表的第一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPOP key</span><br></pre></td></tr></table></figure><p class='p small'>将一个或多个值插入到列表头部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPUSH k1 v1 k2 v2</span><br></pre></td></tr></table></figure><p class='p small'>将一个或多个值插入到已存在的列表头部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPUSHX k1 v1 k2 v2</span><br></pre></td></tr></table></figure><p class='p small'>获取列表指定范围内的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure><p class='p small'>移除列表元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure><p class='p small'>通过索引设置列表元素的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LSET key index value</span><br></pre></td></tr></table></figure><p class='p small'>移除并获取列表最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPOP key</span><br></pre></td></tr></table></figure><p class='p small'>移除列表最后一个元素，并将该元素添加到另一个列表并返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPOPLPUSH source destination</span><br></pre></td></tr></table></figure><p class='p small'>在列表中添加一个或多个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPUSH key v1 v2 v3......</span><br></pre></td></tr></table></figure><p class='p small'>为已存在的列表添加值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPUSHX key value</span><br></pre></td></tr></table></figure><p class='p small'>移除并获取列表第一个元素，如果没有则阻塞队列直到发现或等待超时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BLPOP k1 k2 timeout</span><br></pre></td></tr></table></figure><p class='p small'>移除并获取列表最后一个元素，如果没有则阻塞队列直到发现或等待超时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BRPOP k1 k2 timeout</span><br></pre></td></tr></table></figure><p class='p small'>从列表弹出一个值，并将该元素插入到另一个列表中并返回他，如果没有则阻塞队列直到发现或等待超时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BRPOPLPUSH source destination timeout</span><br></pre></td></tr></table></figure><br/><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><p class='p small'>Set（集合）</p></h3><p class='p small'>Redis的Set是string类型的无序集合。它是通过HashTable实现实现的</p><p class='p small'>向集合添加一个或多个成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SADD key member1 member2</span><br></pre></td></tr></table></figure><p class='p small'>获取集合的成员数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCARD key</span><br></pre></td></tr></table></figure><p class='p small'>返回给定所有集合的差集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDIFF key1 key2</span><br></pre></td></tr></table></figure><p class='p small'>返回给定所有集合的差集并存储在destination中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDIFFSTORE destination k1 k2</span><br></pre></td></tr></table></figure><p class='p small'>返回给定所有集合的交集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTER k1 k2</span><br></pre></td></tr></table></figure><p class='p small'>返回给定所有集合的交集并存储在destination中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTERSTORE destination k1 k2</span><br></pre></td></tr></table></figure><p class='p small'>判断member元素是否是集合key的成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure><p class='p small'>返回集合中所有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure><p class='p small'>将member元素从source集合移动到destination集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMOVE source destination member</span><br></pre></td></tr></table></figure><p class='p small'>移除并返回集合中一个随机元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPOP key</span><br></pre></td></tr></table></figure><p class='p small'>返回集合中一个或多个随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRANDMEMBER key count</span><br></pre></td></tr></table></figure><p class='p small'>移除集合中一个或多个成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SREM key member1 member2</span><br></pre></td></tr></table></figure><p class='p small'>返回所有给定集合的并集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUNION k1 k2</span><br></pre></td></tr></table></figure><p class='p small'>所有给定集合的并集存储在destination集合中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUNIONSTORE destination k1 k2</span><br></pre></td></tr></table></figure><p class='p small'>迭代集合中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSCAN key cursor [MATCH pattem][COUNT count]</span><br></pre></td></tr></table></figure><br/><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><p class='p small'>Zset(sorted set：有序集合)</p></h3><p class='p small'>Redis zset 和 set 一样也是string类型元素的集合</p><p class='p small'>Redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的</p><p class='p small'>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure><p class='p small'>获取有序集合的成员数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCARD key</span><br></pre></td></tr></table></figure><p class='p small'>计算在有序集合中指定区间分数的成员数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZCOUNT key min max</span><br></pre></td></tr></table></figure><p class='p small'>有序集合中对指定成员的分数加上增量 increment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZINCRBY key increment member</span><br></pre></td></tr></table></figure><p class='p small'>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZINTERSTORE destination numkeys key [key ...]</span><br></pre></td></tr></table></figure><p class='p small'>在有序集合中计算指定字典区间内成员数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZLEXCOUNT key min max</span><br></pre></td></tr></table></figure><p class='p small'>通过索引区间返回有序集合指定区间内的成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure><p class='p small'>通过字典区间返回有序集合的成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYLEX key min max [LIMIT offset count]</span><br></pre></td></tr></table></figure><p class='p small'>通过分数返回有序集合指定区间内的成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</span><br></pre></td></tr></table></figure><p class='p small'>返回有序集合中指定成员的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANK key member</span><br></pre></td></tr></table></figure><p class='p small'>移除有序集合中的一个或多个成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREM key member [member ...]</span><br></pre></td></tr></table></figure><p class='p small'>移除有序集合中给定的字典区间的所有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYLEX key min max</span><br></pre></td></tr></table></figure><p class='p small'>移除有序集合中给定的排名区间的所有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYRANK key start stop</span><br></pre></td></tr></table></figure><p class='p small'>移除有序集合中给定的排名区间的所有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYSCORE key min max</span><br></pre></td></tr></table></figure><p class='p small'>返回有序集中指定区间内的成员，通过索引，分数从高到低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure><p class='p small'>返回有序集中指定分数区间内的成员，分数从高到低排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES]</span><br></pre></td></tr></table></figure><p class='p small'>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANK key member</span><br></pre></td></tr></table></figure><p class='p small'>返回有序集中，成员的分数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSCORE key member</span><br></pre></td></tr></table></figure><p class='p small'>计算给定的一个或多个有序集的并集，并存储在新的 key 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE destination numkeys key [key ...]</span><br></pre></td></tr></table></figure><p class='p small'>迭代有序集合中的元素（包括元素成员和元素分值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><br/><h2 id="联系博主"><a href="#联系博主" class="headerlink" title="联系博主"></a>联系博主</h2><div class="btns circle center grid5">            <a href=''>  <i class="fa fa-apple"></i>  <b>微信</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%8D%9A%E4%B8%BB%E5%BE%AE%E4%BF%A1.png'></a><a href=''>  <i class="fa fa-apple"></i>  <b>公众号</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg'></a>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装教程及安装包</title>
      <link href="/buffifly/2021/07/05/RabbitMQ%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8C%85/"/>
      <url>/buffifly/2021/07/05/RabbitMQ%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\buffifly\assets\css\APlayer.min.css"><script src="\buffifly\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\buffifly\assets\js\Meting.min.js"></script><h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h2><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是<br>message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常<br>见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不<br>用依赖其他服务。</p><h2 id="RabbitMQ-的概念"><a href="#RabbitMQ-的概念" class="headerlink" title="RabbitMQ 的概念"></a>RabbitMQ 的概念</h2><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包<br>裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是<br>一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，<br>存储和转发消息数据。</p><h2 id="RabbitMQ四大核心概念"><a href="#RabbitMQ四大核心概念" class="headerlink" title="RabbitMQ四大核心概念"></a>RabbitMQ四大核心概念</h2><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><p>产生数据发送消息的程序是生产者</p><h5 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h5><p>交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息<br>推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推<br>送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><p>队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存<br>储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可<br>以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><p>消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费<br>者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者</p><h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><h5 id="1、下载RabbitMQ，官网地址"><a href="#1、下载RabbitMQ，官网地址" class="headerlink" title="1、下载RabbitMQ，官网地址"></a>1、下载RabbitMQ，官网地址</h5><p><a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a></p><p>博主链接：</p><p><a href="https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/erlang-21.3-1.el7.x86_64.rpm" target="_blank" rel="noopener">https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/erlang-21.3-1.el7.x86_64.rpm</a></p><p><a href="https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/rabbitmq-server-3.8.8-1.el7.noarch.rpm" target="_blank" rel="noopener">https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/rabbitmq-server-3.8.8-1.el7.noarch.rpm</a></p><h5 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h5><p>上传到/usr/local/software 目录下(如果没有 software 需要自己创建)</p><img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0Liunx.png'><h5 id="3、安装文件-分别按照以下顺序安装"><a href="#3、安装文件-分别按照以下顺序安装" class="headerlink" title="3、安装文件(分别按照以下顺序安装)"></a>3、安装文件(分别按照以下顺序安装)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh erlang-21.3-1.el7.x86_64.rpm</span><br><span class="line">yum install socat -y</span><br><span class="line">rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h5 id="4、常用命令-按照以下顺序执行"><a href="#4、常用命令-按照以下顺序执行" class="headerlink" title="4、常用命令(按照以下顺序执行)"></a>4、常用命令(按照以下顺序执行)</h5><p>添加开机启动 RabbitMQ 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;service rabbitmq-server start</span><br></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;service rabbitmq-server status</span><br></pre></td></tr></table></figure><img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/RabbitMQ%E7%8A%B6%E6%80%81.png'><p>停止服务(选择执行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;service rabbitmq-server stop</span><br></pre></td></tr></table></figure><p>开启 web 管理插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>第一次用默认账号密码(guest)访问地址 <a href="http://127.0.0.1:15672/出现权限问题" target="_blank" rel="noopener">http://127.0.0.1:15672/出现权限问题</a></p><img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%99%BB%E9%99%86%E5%87%BA%E7%8E%B0%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.png'><h5 id="5、添加一个新的用户"><a href="#5、添加一个新的用户" class="headerlink" title="5、添加一个新的用户"></a>5、添加一个新的用户</h5><p>创建账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin 123</span><br></pre></td></tr></table></figure><p>设置用户角色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>设置用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p &quot;&#x2F;&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><p>查看RabbitMQ中当前所有用户和角色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h5 id="6、再次利用-admin-用户登录"><a href="#6、再次利用-admin-用户登录" class="headerlink" title="6、再次利用 admin 用户登录"></a>6、再次利用 admin 用户登录</h5><img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/img/RabbitMQ/%E5%86%8D%E6%AC%A1%E7%99%BB%E9%99%86RabbitMQ.png'><h5 id="7、重置命令"><a href="#7、重置命令" class="headerlink" title="7、重置命令"></a>7、重置命令</h5><p>关闭应用的命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><p>清除的命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl reset</span><br></pre></td></tr></table></figure><p>重新启动命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><h2 id="联系博主"><a href="#联系博主" class="headerlink" title="联系博主"></a>联系博主</h2><div class="btns circle center grid5">            <a href=''>  <i class="fa fa-apple"></i>  <b>微信</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%8D%9A%E4%B8%BB%E5%BE%AE%E4%BF%A1.png'></a><a href=''>  <i class="fa fa-apple"></i>  <b>公众号</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg'></a>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7防火墙设置</title>
      <link href="/buffifly/2021/07/01/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
      <url>/buffifly/2021/07/01/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\buffifly\assets\css\APlayer.min.css"><script src="\buffifly\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\buffifly\assets\js\Meting.min.js"></script><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><h5 id="查看已开放的端口"><a href="#查看已开放的端口" class="headerlink" title="查看已开放的端口"></a>查看已开放的端口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h5 id="开放端口（开放后需要要重启防火墙才生效）"><a href="#开放端口（开放后需要要重启防火墙才生效）" class="headerlink" title="开放端口（开放后需要要重启防火墙才生效）"></a>开放端口（开放后需要要重启防火墙才生效）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;3338&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><h5 id="关闭端口（关闭后需要要重启防火墙才生效）"><a href="#关闭端口（关闭后需要要重启防火墙才生效）" class="headerlink" title="关闭端口（关闭后需要要重启防火墙才生效）"></a>关闭端口（关闭后需要要重启防火墙才生效）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;3338&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><h5 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h5 id="开机启动防火墙"><a href="#开机启动防火墙" class="headerlink" title="开机启动防火墙"></a>开机启动防火墙</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><h5 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><h5 id="禁止防火墙开机启动"><a href="#禁止防火墙开机启动" class="headerlink" title="禁止防火墙开机启动"></a>禁止防火墙开机启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h5 id="停止防火墙"><a href="#停止防火墙" class="headerlink" title="停止防火墙"></a>停止防火墙</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h2 id="联系博主"><a href="#联系博主" class="headerlink" title="联系博主"></a>联系博主</h2><div class="btns circle center grid5">            <a href=''>  <i class="fa fa-apple"></i>  <b>微信</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%8D%9A%E4%B8%BB%E5%BE%AE%E4%BF%A1.png'></a><a href=''>  <i class="fa fa-apple"></i>  <b>公众号</b>  <img src= "/buffifly/img/loading.gif" data-src='https://lu-jia-chen.oss-cn-beijing.aliyuncs.com/lujiachen/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg'></a>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
